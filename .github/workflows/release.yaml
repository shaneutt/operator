name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: The version to release (e.g. v1.2.3)
        required: true
      latest:
        description: Whether to tag this release latest
        required: true
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RH_SCAN_REGISTRY: scan.connect.redhat.com
  RH_IMAGE_NAME: ${{ secrets.RH_PROJECT_ID }}/gateway-operator


jobs:
  semver:
    outputs:
      fullversion: ${{ steps.semver_parser.outputs.fullversion }}
      major: ${{ steps.semver_parser.outputs.major }}
      minor: ${{ steps.semver_parser.outputs.minor }}
      patch: ${{ steps.semver_parser.outputs.patch }}
      prerelease: ${{ steps.semver_parser.outputs.prerelease }}
    runs-on: ubuntu-latest
    steps:
      - uses: mukunku/tag-exists-action@v1.0.0
        id: check-tag
        name: check if tag already exists
        with:
          tag: ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: fail if tag already exists
        if: ${{ steps.check-tag.outputs.exists == 'true' }}
        run: exit 1

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.event.inputs.tag }}
          version_extractor_regex: 'v(.*)$'

  build-push-images:
    environment: 'Docker Push'
    needs: semver
    runs-on: ubuntu-latest
    steps:

      - name: Add standard tags
        run: |
          echo 'TAGS_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.fullversion }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add major.minor tag
        if: ${{ needs.semver.outputs.prerelease == '' }}
        run: |
          echo 'TAGS_SUPPLEMENTAL<<EOF' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.major }}.${{ needs.semver.outputs.minor }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add Red Hat standard tags
        run: |
          echo 'REDHAT_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.fullversion }},suffix=-redhat' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add Red Hat major.minor tag
        if: ${{ needs.semver.outputs.prerelease == '' }}
        run: |
          echo 'REDHAT_SUPPLEMENTAL<<EOF' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo 'type=raw,value=${{ needs.semver.outputs.major }}.${{ needs.semver.outputs.minor }},suffix=-redhat' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to RH Scan Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.RH_SCAN_REGISTRY }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.event.inputs.latest == 'true' }}
          tags: ${{ env.TAGS_STANDARD }}${{ env.TAGS_SUPPLEMENTAL }}

      - name: Docker meta (RedHat)
        id: meta_redhat
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ env.REDHAT_STANDARD }}${{ env.REDHAT_SUPPLEMENTAL }}

      - name: Build binary
        id: docker_build_binary
        uses: docker/build-push-action@v3.1.1
        with:
          push: false
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: builder
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3.1.1
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: distroless
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push Red Hat
        id: docker_build_redhat
        env:
          TAG: ${{ steps.meta_redhat.outputs.version }}
        uses: docker/build-push-action@v3.1.1
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta_redhat.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          # RedHat scan registry does not support multiarch images
          platforms: linux/amd64
          build-args: |
            TAG=${{ steps.meta_redhat.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Red Hat certification
        uses: ./.github/actions/redhat-certification-action
        with:
          image: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}:${{ steps.meta_redhat.outputs.version }}
          submit: true
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
          apitoken: ${{ secrets.RH_PYXIS_TOKEN }}
          certificationid: ${{ secrets.RH_PROJECT_ID }}

  test-integration-current-kubernetes:
    runs-on: ubuntu-latest
    needs: build-push-images
    strategy:
      matrix:
        kubernetes-version:
          - 'v1.24.2'
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Kubernetes ${{ matrix.kubernetes_version }} Integration Tests
        run: make test.integration

  test-e2e-current-kubernetes:
    runs-on: ubuntu-latest
    needs: build-push-images
    strategy:
      matrix:
        kubernetes-version:
          - 'v1.24.2'
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Kubernetes ${{ matrix.kubernetes_version }} E2E Tests
        run: make test.e2e

  publish-release:
    runs-on: ubuntu-latest
    needs:
      - semver
      - build-push-images
      - test-integration-current-kubernetes
      - test-e2e-current-kubernetes
    steps:
      - uses: ncipollo/release-action@v1
        with:
          body: |
            #### Download Kong Gateway Operator ${{ needs.semver.outputs.fullversion }}:

            - [Docker Image](https://github.com/Kong/gateway-operator/pkgs/container/gateway-operator)
            - [Get started](https://github.com/Kong/gateway-operator/blob/main/README.md)

            #### Links:

            - [Changelog](https://github.com/Kong/gateway-operator/blob/main/CHANGELOG.md#${{ needs.semver.outputs.major }}${{ needs.semver.outputs.minor }}${{ needs.semver.outputs.patch }})

          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.tag }}
          commit: ${{ github.sha }}
