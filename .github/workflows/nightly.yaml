name: nightly

on:
  schedule:
    - cron: '30 3 * * *'
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RH_SCAN_REGISTRY: scan.connect.redhat.com
  RH_IMAGE_NAME: ${{ secrets.RH_PROJECT_ID }}/gateway-operator

jobs:
  build-push-images:
    environment: 'Docker Push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (actions)
        uses: actions/checkout@v3

      - name: Add standard tags
        run: |
          echo 'TAGS_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=nightly' >> $GITHUB_ENV
          echo "type=raw,value={{date 'YYYY-MM-DD'}}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add Red Hat standard tags
        run: |
          echo 'REDHAT_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=nightly,suffix=-redhat' >> $GITHUB_ENV
          echo "type=raw,value={{date 'YYYY-MM-DD'}},suffix=-redhat" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to RH Scan Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.RH_SCAN_REGISTRY }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ env.TAGS_STANDARD }}

      - name: Docker meta (RedHat)
        id: meta_redhat
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ env.REDHAT_STANDARD }}

      - name: Build binary
        id: docker_build_binary
        uses: docker/build-push-action@v3.1.1
        with:
          push: false
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: builder
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3.1.1
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: distroless
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push Red Hat
        id: docker_build_redhat
        env:
          TAG: ${{ steps.meta_redhat.outputs.version }}
        uses: docker/build-push-action@v3.1.1
        with:
          push: false
          file: Dockerfile
          tags: ${{ steps.meta_redhat.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          # RedHat scan registry does not support multiarch images
          platforms: linux/amd64
          build-args: |
            TAG=${{ steps.meta_redhat.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Run Red Hat certification
        uses: ./.github/actions/redhat-certification-action
        with:
          image: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}:${{ steps.meta_redhat.outputs.version }}
          submit: false
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
          apitoken: ${{ secrets.RH_PYXIS_TOKEN }}
          certificationid: ${{ secrets.RH_PROJECT_ID }}
